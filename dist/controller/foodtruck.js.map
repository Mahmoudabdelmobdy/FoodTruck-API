{"version":3,"sources":["../../src/controller/foodtruck.js"],"names":["config","db","api","get","req","res","Foodtruck","find","err","foodtrucks","send","json","findById","params","id","foodtruck","status","post","authenticate","newFoodtruck","name","body","foodtype","avgcost","geometry","coordinates","lat","long","save","message","delete","remove","_id","Review","review","put","newReview","title","text","reviews","push"],"mappings":"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","file":"foodtruck.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Foodtruck from '../model/foodtruck';\nimport Review from '../model/review';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\n\nexport default({ config, db}) => {\n    let api = Router();\n\n    //CRUD - Create Read Update Delete\n\n    // '/v1/foodtruck' - Read (GET all food trucks)\n    api.get('/', (req, res) => {\n        Foodtruck.find({}, (err, foodtrucks) => {\n            if (err) {\n                res.send(err);\n            }\n            res.json(foodtrucks);\n        });\n    });\n\n    // '/v1/foodtruck/:id' GET Specific food truck\n    api.get('/:id', (req, res) => {\n        Foodtruck.findById(req.params.id, (err, foodtruck) => {\n            if (err) {\n                res.status(500).send(err);\n                return;\n            }\n            res.json(foodtruck);\n        });\n    });\n\n    // '/v1/foodtruck/add' -POST add a food truck\n    api.post('/add', authenticate, (req, res) => {\n        let newFoodtruck = new Foodtruck();\n        newFoodtruck.name = req.body.name;\n        newFoodtruck.foodtype = req.body.foodtype;\n        newFoodtruck.avgcost = req.body.avgcost;\n        newFoodtruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n        newFoodtruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n\n        // newFoodtruck.save()\n        // .then(data => {\n        //     res.json({ message: 'Foodtruck saved successfully' });\n        // }).catch(err => {\n        //     res.status(500).send({\n        //         message: err.message || \"Some error occured\"\n        //     });\n        // });\n\n        newFoodtruck.save(err => {\n            if (err) {\n                res.status(500).send(err);\n                return;\n            }\n            res.json({ message: 'Foodtruck saved successfully' });\n        });\n    });  \n\n    // '/v1/foodtruck/:id' -Delete\n    api.delete('/:id', authenticate, (req, res) => {\n        Foodtruck.findById(req.params.id, (err, foodtruck) => {\n\n            if (err) {\n                res.status(500).send(err);\n                return;\n            }\n            if (foodtruck === null) {\n                res.status(404).send(\"Food truck not found\");\n                return;\n            }\n            Foodtruck.remove({\n                _id: req.params.id\n            },(err, foodtruck) => {\n                if (err) {\n                res.status(500).send(err);\n                return;\n                }\n                res.json({ message : \"Foodtruck and Reviews successfully Removed!\"});\n                // res.json({ foodtruck : foodtruck.reviews });\n            });\n            Review.remove({\n                foodtruck: req.params.id\n            },(err, review) => {\n                if (err) {\n                    res.status(500).send(err);\n                    return;\n                }\n            });\n        });\n    });\n\n    // 'v1/foodtruck:id' -Update\n    api.put('/:id', authenticate, (req, res) => {\n        Foodtruck.findById(req.params.id, (err, foodtruck) => {\n            if (err) {\n                res.status(500).send(err);\n                return;\n            }\n            foodtruck.name = req.body.name;\n            foodtruck.foodtype = req.body.foodtype;\n            foodtruck.avgcost = req.body.avgcost;\n            foodtruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n            foodtruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n\n            foodtruck.save(err => {\n                if (err) {\n                res.status(500).send(err);\n                return;\n                }\n                res.json({message : 'Foodtruck info updated'});\n            });\n        });\n    })\n\n    // add review for a specific foodtruck ID\n    // 'v1/foodtruck/reviews/add/:id\n    api.post('/reviews/add/:id', authenticate, (req, res) => {\n        Foodtruck.findById(req.params.id, (err, foodtruck) => {\n            if (err) {\n                res.status(500).send(err);\n                return;\n            }\n            let newReview = new Review();\n\n            newReview.title = req.body.title;\n            newReview.text = req.body.text;\n            newReview.foodtruck = foodtruck._id;\n\n            newReview.save((err, review) => {\n                if (err) {\n                    res.status(500).send(err);\n                    return;\n                }\n                foodtruck.reviews.push(review);\n                foodtruck.save((err) => {\n                    if(err) {\n                        res.status(500).send(err);\n                        return;\n                    }\n                    res.json({ message : 'Foodtruck review saved!' });\n                });\n            });\n        });\n    });\n\n    // '/v1/foodtruck/reviews/:id' GET reviews for specific truck\n    api.get('/reviews/:id', (req, res) => {\n        Review.find(req.params.id, (err, reviews) => {\n            if (err) {\n                res.status(500).send(err);\n                return;\n            }\n            res.json(reviews);\n        });\n    });\n\n    return api;\n}"]}